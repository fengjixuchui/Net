$dokka.format:gfm
$dokka.linkExtension:md
$dokka.location:com.drake.net$Delete(kotlinx.coroutines.CoroutineScope, kotlin.String, kotlin.Any, kotlin.Function1((com.drake.net.request.BodyRequest, kotlin.Unit)))com.drake.net/kotlinx.coroutines.-coroutine-scope/-delete.md
$dokka.location:com.drake.net$Get(kotlinx.coroutines.CoroutineScope, kotlin.String, kotlin.Any, kotlin.Function1((com.drake.net.request.UrlRequest, kotlin.Unit)))com.drake.net/kotlinx.coroutines.-coroutine-scope/-get.md
$dokka.location:com.drake.net$Head(kotlinx.coroutines.CoroutineScope, kotlin.String, kotlin.Any, kotlin.Function1((com.drake.net.request.UrlRequest, kotlin.Unit)))com.drake.net/kotlinx.coroutines.-coroutine-scope/-head.md
$dokka.location:com.drake.net$Options(kotlinx.coroutines.CoroutineScope, kotlin.String, kotlin.Any, kotlin.Function1((com.drake.net.request.UrlRequest, kotlin.Unit)))com.drake.net/kotlinx.coroutines.-coroutine-scope/-options.md
$dokka.location:com.drake.net$Patch(kotlinx.coroutines.CoroutineScope, kotlin.String, kotlin.Any, kotlin.Function1((com.drake.net.request.BodyRequest, kotlin.Unit)))com.drake.net/kotlinx.coroutines.-coroutine-scope/-patch.md
$dokka.location:com.drake.net$Post(kotlinx.coroutines.CoroutineScope, kotlin.String, kotlin.Any, kotlin.Function1((com.drake.net.request.BodyRequest, kotlin.Unit)))com.drake.net/kotlinx.coroutines.-coroutine-scope/-post.md
$dokka.location:com.drake.net$Put(kotlinx.coroutines.CoroutineScope, kotlin.String, kotlin.Any, kotlin.Function1((com.drake.net.request.BodyRequest, kotlin.Unit)))com.drake.net/kotlinx.coroutines.-coroutine-scope/-put.md
$dokka.location:com.drake.net$Trace(kotlinx.coroutines.CoroutineScope, kotlin.String, kotlin.Any, kotlin.Function1((com.drake.net.request.UrlRequest, kotlin.Unit)))com.drake.net/kotlinx.coroutines.-coroutine-scope/-trace.md
$dokka.location:com.drake.net.body$peekString(okhttp3.RequestBody, kotlin.Long, kotlin.Boolean)com.drake.net.body/okhttp3.-request-body/peek-string.md
$dokka.location:com.drake.net.body$peekString(okhttp3.ResponseBody, kotlin.Long, kotlin.Boolean)com.drake.net.body/okhttp3.-response-body/peek-string.md
$dokka.location:com.drake.net.body$toNetRequestBody(okhttp3.RequestBody, okhttp3.Request)com.drake.net.body/okhttp3.-request-body/to-net-request-body.md
$dokka.location:com.drake.net.body$toNetResponseBody(okhttp3.ResponseBody, okhttp3.Request, kotlin.Function0((kotlin.Unit)))com.drake.net.body/okhttp3.-response-body/to-net-response-body.md
$dokka.location:com.drake.net.exception$NetCancellationException(kotlinx.coroutines.CoroutineScope, kotlin.String)com.drake.net.exception/kotlinx.coroutines.-coroutine-scope/-net-cancellation-exception.md
$dokka.location:com.drake.net.okhttp$attachToNet(okhttp3.Call)com.drake.net.okhttp/okhttp3.-call/attach-to-net.md
$dokka.location:com.drake.net.okhttp$cancelGroup(okhttp3.OkHttpClient, kotlin.Any)com.drake.net.okhttp/okhttp3.-ok-http-client/cancel-group.md
$dokka.location:com.drake.net.okhttp$cancelId(okhttp3.OkHttpClient, kotlin.Any)com.drake.net.okhttp/okhttp3.-ok-http-client/cancel-id.md
$dokka.location:com.drake.net.okhttp$detachFromNet(okhttp3.Call)com.drake.net.okhttp/okhttp3.-call/detach-from-net.md
$dokka.location:com.drake.net.okhttp$onDialog(okhttp3.OkHttpClient.Builder, kotlin.Function2((com.drake.net.scope.DialogCoroutineScope, androidx.fragment.app.FragmentActivity, android.app.Dialog)))com.drake.net.okhttp/okhttp3.-ok-http-client.-builder/on-dialog.md
$dokka.location:com.drake.net.okhttp$onError(okhttp3.OkHttpClient.Builder, kotlin.Function1((kotlin.Throwable, kotlin.Unit)))com.drake.net.okhttp/okhttp3.-ok-http-client.-builder/on-error.md
$dokka.location:com.drake.net.okhttp$onStateError(okhttp3.OkHttpClient.Builder, kotlin.Function2((kotlin.Throwable, android.view.View, kotlin.Unit)))com.drake.net.okhttp/okhttp3.-ok-http-client.-builder/on-state-error.md
$dokka.location:com.drake.net.okhttp$setConverter(okhttp3.OkHttpClient.Builder, com.drake.net.convert.NetConverter)com.drake.net.okhttp/okhttp3.-ok-http-client.-builder/set-converter.md
$dokka.location:com.drake.net.okhttp$setHost(okhttp3.OkHttpClient.Builder, kotlin.String)com.drake.net.okhttp/okhttp3.-ok-http-client.-builder/set-host.md
$dokka.location:com.drake.net.okhttp$setLog(okhttp3.OkHttpClient.Builder, kotlin.Boolean)com.drake.net.okhttp/okhttp3.-ok-http-client.-builder/set-log.md
$dokka.location:com.drake.net.okhttp$setRequestInterceptor(okhttp3.OkHttpClient.Builder, com.drake.net.interceptor.RequestInterceptor)com.drake.net.okhttp/okhttp3.-ok-http-client.-builder/set-request-interceptor.md
$dokka.location:com.drake.net.okhttp$setSSLCertificate(okhttp3.OkHttpClient.Builder, javax.net.ssl.X509TrustManager, java.io.InputStream, kotlin.String)com.drake.net.okhttp/okhttp3.-ok-http-client.-builder/set-s-s-l-certificate.md
$dokka.location:com.drake.net.okhttp$setSSLCertificate(okhttp3.OkHttpClient.Builder, kotlin.Array((java.io.InputStream)), java.io.InputStream, kotlin.String)com.drake.net.okhttp/okhttp3.-ok-http-client.-builder/set-s-s-l-certificate.md
$dokka.location:com.drake.net.okhttp$toNetOkhttp(okhttp3.OkHttpClient)com.drake.net.okhttp/okhttp3.-ok-http-client/to-net-okhttp.md
$dokka.location:com.drake.net.okhttp$toNetOkhttp(okhttp3.OkHttpClient.Builder)com.drake.net.okhttp/okhttp3.-ok-http-client.-builder/to-net-okhttp.md
$dokka.location:com.drake.net.okhttp$trustSSLCertificate(okhttp3.OkHttpClient.Builder)com.drake.net.okhttp/okhttp3.-ok-http-client.-builder/trust-s-s-l-certificate.md
$dokka.location:com.drake.net.request$FORM#okhttp3.MediaType.Companioncom.drake.net.request/okhttp3.-media-type/-f-o-r-m.md
$dokka.location:com.drake.net.request$GIF#okhttp3.MediaType.Companioncom.drake.net.request/okhttp3.-media-type/-g-i-f.md
$dokka.location:com.drake.net.request$HTML#okhttp3.MediaType.Companioncom.drake.net.request/okhttp3.-media-type/-h-t-m-l.md
$dokka.location:com.drake.net.request$IMG#okhttp3.MediaType.Companioncom.drake.net.request/okhttp3.-media-type/-i-m-g.md
$dokka.location:com.drake.net.request$JPEG#okhttp3.MediaType.Companioncom.drake.net.request/okhttp3.-media-type/-j-p-e-g.md
$dokka.location:com.drake.net.request$JSON#okhttp3.MediaType.Companioncom.drake.net.request/okhttp3.-media-type/-j-s-o-n.md
$dokka.location:com.drake.net.request$MP4#okhttp3.MediaType.Companioncom.drake.net.request/okhttp3.-media-type/-m-p4.md
$dokka.location:com.drake.net.request$PNG#okhttp3.MediaType.Companioncom.drake.net.request/okhttp3.-media-type/-p-n-g.md
$dokka.location:com.drake.net.request$TXT#okhttp3.MediaType.Companioncom.drake.net.request/okhttp3.-media-type/-t-x-t.md
$dokka.location:com.drake.net.request$URLENCODED#okhttp3.MediaType.Companioncom.drake.net.request/okhttp3.-media-type/-u-r-l-e-n-c-o-d-e-d.md
$dokka.location:com.drake.net.request$XML#okhttp3.MediaType.Companioncom.drake.net.request/okhttp3.-media-type/-x-m-l.md
$dokka.location:com.drake.net.request$addDownloadListener(okhttp3.Request, com.drake.net.interfaces.ProgressListener)com.drake.net.request/okhttp3.-request/add-download-listener.md
$dokka.location:com.drake.net.request$addUploadListener(okhttp3.Request, com.drake.net.interfaces.ProgressListener)com.drake.net.request/okhttp3.-request/add-upload-listener.md
$dokka.location:com.drake.net.request$converter(okhttp3.Request)com.drake.net.request/okhttp3.-request/converter.md
$dokka.location:com.drake.net.request$downloadConflictRename(okhttp3.Request)com.drake.net.request/okhttp3.-request/download-conflict-rename.md
$dokka.location:com.drake.net.request$downloadFileDir(okhttp3.Request)com.drake.net.request/okhttp3.-request/download-file-dir.md
$dokka.location:com.drake.net.request$downloadFileName(okhttp3.Request)com.drake.net.request/okhttp3.-request/download-file-name.md
$dokka.location:com.drake.net.request$downloadFileNameDecode(okhttp3.Request)com.drake.net.request/okhttp3.-request/download-file-name-decode.md
$dokka.location:com.drake.net.request$downloadListeners(okhttp3.Request)com.drake.net.request/okhttp3.-request/download-listeners.md
$dokka.location:com.drake.net.request$downloadMd5Verify(okhttp3.Request)com.drake.net.request/okhttp3.-request/download-md5-verify.md
$dokka.location:com.drake.net.request$downloadTempFile(okhttp3.Request)com.drake.net.request/okhttp3.-request/download-temp-file.md
$dokka.location:com.drake.net.request$group(okhttp3.Request)com.drake.net.request/okhttp3.-request/group.md
$dokka.location:com.drake.net.request$id(okhttp3.Request)com.drake.net.request/okhttp3.-request/id.md
$dokka.location:com.drake.net.request$isLogRecord(okhttp3.Request)com.drake.net.request/okhttp3.-request/is-log-record.md
$dokka.location:com.drake.net.request$label(okhttp3.Request)com.drake.net.request/okhttp3.-request/label.md
$dokka.location:com.drake.net.request$logString(okhttp3.Request, kotlin.Long)com.drake.net.request/okhttp3.-request/log-string.md
$dokka.location:com.drake.net.request$setConverter(okhttp3.Request.Builder, com.drake.net.convert.NetConverter)com.drake.net.request/okhttp3.-request.-builder/set-converter.md
$dokka.location:com.drake.net.request$setGroup(okhttp3.Request.Builder, kotlin.Any)com.drake.net.request/okhttp3.-request.-builder/set-group.md
$dokka.location:com.drake.net.request$setId(okhttp3.Request.Builder, kotlin.Any)com.drake.net.request/okhttp3.-request.-builder/set-id.md
$dokka.location:com.drake.net.request$setLabel(okhttp3.Request.Builder, com.drake.net.request.setLabel.T)com.drake.net.request/okhttp3.-request.-builder/set-label.md
$dokka.location:com.drake.net.request$setLogRecord(okhttp3.Request.Builder, kotlin.Boolean)com.drake.net.request/okhttp3.-request.-builder/set-log-record.md
$dokka.location:com.drake.net.request$setTag(okhttp3.Request, kotlin.String, kotlin.Any)com.drake.net.request/okhttp3.-request/set-tag.md
$dokka.location:com.drake.net.request$tag(okhttp3.Request, kotlin.String)com.drake.net.request/okhttp3.-request/tag.md
$dokka.location:com.drake.net.request$uploadListeners(okhttp3.Request)com.drake.net.request/okhttp3.-request/upload-listeners.md
$dokka.location:com.drake.net.response$file(okhttp3.Response)com.drake.net.response/okhttp3.-response/file.md
$dokka.location:com.drake.net.response$fileName(okhttp3.Response)com.drake.net.response/okhttp3.-response/file-name.md
$dokka.location:com.drake.net.response$logString(okhttp3.Response, kotlin.Long)com.drake.net.response/okhttp3.-response/log-string.md
$dokka.location:com.drake.net.transform$transform(kotlinx.coroutines.Deferred((com.drake.net.transform.transform.T)), kotlin.Function1((com.drake.net.transform.transform.T, com.drake.net.transform.transform.R)))com.drake.net.transform/kotlinx.coroutines.-deferred/transform.md
$dokka.location:com.drake.net.utils$debounce(android.widget.EditText, kotlin.Long)com.drake.net.utils/android.widget.-edit-text/debounce.md
$dokka.location:com.drake.net.utils$fastest(kotlinx.coroutines.CoroutineScope, kotlin.collections.List((com.drake.net.transform.DeferredTransform((com.drake.net.utils.fastest.T, com.drake.net.utils.fastest.R)))), kotlin.Any)com.drake.net.utils/kotlinx.coroutines.-coroutine-scope/fastest.md
$dokka.location:com.drake.net.utils$fastest(kotlinx.coroutines.CoroutineScope, kotlin.collections.List((kotlinx.coroutines.Deferred((com.drake.net.utils.fastest.T)))), kotlin.Any)com.drake.net.utils/kotlinx.coroutines.-coroutine-scope/fastest.md
$dokka.location:com.drake.net.utils$isValid#kotlin.Stringcom.drake.net.utils/kotlin.-string/is-valid.md
$dokka.location:com.drake.net.utils$isValid(kotlin.String, kotlin.Function1((kotlin.String, kotlin.Unit)))com.drake.net.utils/kotlin.-string/is-valid.md
$dokka.location:com.drake.net.utils$listen(kotlinx.coroutines.flow.Flow((com.drake.net.utils.listen.T)), androidx.lifecycle.LifecycleOwner, androidx.lifecycle.Lifecycle.Event, kotlinx.coroutines.CoroutineDispatcher, kotlin.coroutines.SuspendFunction2((kotlinx.coroutines.CoroutineScope, com.drake.net.utils.listen.T, kotlin.Unit)))com.drake.net.utils/kotlinx.coroutines.flow.-flow/listen.md
$dokka.location:com.drake.net.utils$md5(java.io.File)com.drake.net.utils/java.io.-file/md5.md
$dokka.location:com.drake.net.utils$scope(com.drake.brv.PageRefreshLayout, kotlinx.coroutines.CoroutineDispatcher, kotlin.coroutines.SuspendFunction1((kotlinx.coroutines.CoroutineScope, kotlin.Unit)))com.drake.net.utils/com.drake.brv.-page-refresh-layout/scope.md
$dokka.location:com.drake.net.utils$scope(com.drake.statelayout.StateLayout, kotlinx.coroutines.CoroutineDispatcher, kotlin.coroutines.SuspendFunction1((kotlinx.coroutines.CoroutineScope, kotlin.Unit)))com.drake.net.utils/com.drake.statelayout.-state-layout/scope.md
$dokka.location:com.drake.net.utils$scope(kotlinx.coroutines.flow.Flow((com.drake.net.utils.scope.T)), androidx.lifecycle.LifecycleOwner, androidx.lifecycle.Lifecycle.Event, kotlinx.coroutines.CoroutineDispatcher, kotlin.coroutines.SuspendFunction2((kotlinx.coroutines.CoroutineScope, com.drake.net.utils.scope.T, kotlin.Unit)))com.drake.net.utils/kotlinx.coroutines.flow.-flow/scope.md
$dokka.location:com.drake.net.utils$scopeDialog(androidx.fragment.app.Fragment, android.app.Dialog, kotlin.Boolean, kotlinx.coroutines.CoroutineDispatcher, kotlin.coroutines.SuspendFunction1((kotlinx.coroutines.CoroutineScope, kotlin.Unit)))com.drake.net.utils/androidx.fragment.app.-fragment/scope-dialog.md
$dokka.location:com.drake.net.utils$scopeDialog(androidx.fragment.app.FragmentActivity, android.app.Dialog, kotlin.Boolean, kotlinx.coroutines.CoroutineDispatcher, kotlin.coroutines.SuspendFunction1((kotlinx.coroutines.CoroutineScope, kotlin.Unit)))com.drake.net.utils/androidx.fragment.app.-fragment-activity/scope-dialog.md
$dokka.location:com.drake.net.utils$scopeLife(androidx.fragment.app.Fragment, androidx.lifecycle.Lifecycle.Event, kotlinx.coroutines.CoroutineDispatcher, kotlin.coroutines.SuspendFunction1((kotlinx.coroutines.CoroutineScope, kotlin.Unit)))com.drake.net.utils/androidx.fragment.app.-fragment/scope-life.md
$dokka.location:com.drake.net.utils$scopeNetLife(androidx.fragment.app.Fragment, androidx.lifecycle.Lifecycle.Event, kotlinx.coroutines.CoroutineDispatcher, kotlin.coroutines.SuspendFunction1((kotlinx.coroutines.CoroutineScope, kotlin.Unit)))com.drake.net.utils/androidx.fragment.app.-fragment/scope-net-life.md
androidx.lifecycle
com.drake.net
com.drake.net.body
com.drake.net.component
com.drake.net.convert
com.drake.net.exception
com.drake.net.interceptor
com.drake.net.interfaces
com.drake.net.log
com.drake.net.okhttp
com.drake.net.request
com.drake.net.response
com.drake.net.scope
com.drake.net.tag
com.drake.net.time
com.drake.net.transform
com.drake.net.utils
